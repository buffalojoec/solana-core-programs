/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Base58EncodedAddress } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU32Decoder, getU32Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  Context,
  CustomGeneratedInstruction,
  ResolvedAccount,
  Signer,
  WrappedInstruction,
  accountMetaWithDefault,
  getAccountMetasAndSigners,
} from '../shared';

// Output.
export type CloseLutInstruction<
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111',
  TAccountAddress extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAddress extends string
        ? WritableAccount<TAccountAddress>
        : TAccountAddress,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountRecipient extends string
        ? WritableAccount<TAccountRecipient>
        : TAccountRecipient,
      ...TRemainingAccounts
    ]
  >;

export type CloseLutInstructionData = { discriminator: number };

export type CloseLutInstructionDataArgs = {};

export function getCloseLutInstructionDataEncoder(): Encoder<CloseLutInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder<{ discriminator: number }>(
      [['discriminator', getU32Encoder()]],
      { description: 'CloseLutInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 4 })
  ) as Encoder<CloseLutInstructionDataArgs>;
}

export function getCloseLutInstructionDataDecoder(): Decoder<CloseLutInstructionData> {
  return getStructDecoder<CloseLutInstructionData>(
    [['discriminator', getU32Decoder()]],
    { description: 'CloseLutInstructionData' }
  ) as Decoder<CloseLutInstructionData>;
}

export function getCloseLutInstructionDataCodec(): Codec<
  CloseLutInstructionDataArgs,
  CloseLutInstructionData
> {
  return combineCodec(
    getCloseLutInstructionDataEncoder(),
    getCloseLutInstructionDataDecoder()
  );
}

export function closeLutInstruction<
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111',
  TAccountAddress extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    address: TAccountAddress extends string
      ? Base58EncodedAddress<TAccountAddress>
      : TAccountAddress;
    authority: TAccountAuthority extends string
      ? Base58EncodedAddress<TAccountAuthority>
      : TAccountAuthority;
    recipient: TAccountRecipient extends string
      ? Base58EncodedAddress<TAccountRecipient>
      : TAccountRecipient;
  },
  programAddress: Base58EncodedAddress<TProgram> = 'AddressLookupTab1e1111111111111111111111111' as Base58EncodedAddress<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.address, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.authority, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(accounts.recipient, AccountRole.WRITABLE),
      ...(remainingAccounts ?? []),
    ],
    data: getCloseLutInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseLutInstruction<
    TProgram,
    TAccountAddress,
    TAccountAuthority,
    TAccountRecipient,
    TRemainingAccounts
  >;
}

// Input.
export type CloseLutInput<
  TAccountAddress extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string
> = {
  address: Base58EncodedAddress<TAccountAddress>;
  authority?: Signer<TAccountAuthority>;
  recipient: Base58EncodedAddress<TAccountRecipient>;
};

export async function closeLut<
  TReturn,
  TAccountAddress extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string,
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111'
>(
  context: Pick<Context, 'getProgramAddress'> &
    CustomGeneratedInstruction<
      CloseLutInstruction<
        TProgram,
        TAccountAddress,
        TAccountAuthority,
        TAccountRecipient
      >,
      TReturn
    >,
  input: CloseLutInput<TAccountAddress, TAccountAuthority, TAccountRecipient>
): Promise<TReturn>;
export async function closeLut<
  TAccountAddress extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string,
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111'
>(
  context: Pick<Context, 'getProgramAddress'>,
  input: CloseLutInput<TAccountAddress, TAccountAuthority, TAccountRecipient>
): Promise<
  WrappedInstruction<
    CloseLutInstruction<
      TProgram,
      TAccountAddress,
      TAccountAuthority,
      TAccountRecipient
    >
  >
>;
export async function closeLut<
  TAccountAddress extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string,
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111'
>(
  input: CloseLutInput<TAccountAddress, TAccountAuthority, TAccountRecipient>
): Promise<
  WrappedInstruction<
    CloseLutInstruction<
      TProgram,
      TAccountAddress,
      TAccountAuthority,
      TAccountRecipient
    >
  >
>;
export async function closeLut<
  TReturn,
  TAccountAddress extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string,
  TProgram extends string = 'AddressLookupTab1e1111111111111111111111111'
>(
  rawContext:
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>)
    | CloseLutInput<TAccountAddress, TAccountAuthority, TAccountRecipient>,
  rawInput?: CloseLutInput<
    TAccountAddress,
    TAccountAuthority,
    TAccountRecipient
  >
): Promise<TReturn | WrappedInstruction<IInstruction>> {
  // Resolve context and input arguments.
  const context = (rawInput === undefined ? {} : rawInput) as
    | Pick<Context, 'getProgramAddress'>
    | (Pick<Context, 'getProgramAddress'> &
        CustomGeneratedInstruction<IInstruction, TReturn>);
  const input = (
    rawInput === undefined ? rawContext : rawInput
  ) as CloseLutInput<TAccountAddress, TAccountAuthority, TAccountRecipient>;

  // Program address.
  const defaultProgramAddress =
    'AddressLookupTab1e1111111111111111111111111' as Base58EncodedAddress<'AddressLookupTab1e1111111111111111111111111'>;
  const programAddress = (
    context.getProgramAddress
      ? await context.getProgramAddress({
          name: 'splAddressLookupTable',
          address: defaultProgramAddress,
        })
      : defaultProgramAddress
  ) as Base58EncodedAddress<TProgram>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof closeLutInstruction<
      TProgram,
      TAccountAddress,
      TAccountAuthority,
      TAccountRecipient
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    address: { value: input.address ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    recipient: { value: input.recipient ?? null, isWritable: true },
  };

  // Get account metas and signers.
  const [accountMetas, signers] = getAccountMetasAndSigners(
    accounts,
    'programId',
    programAddress
  );

  // Remaining accounts.
  const remainingAccounts: IAccountMeta[] = [];

  // Bytes created on chain.
  const bytesCreatedOnChain = 0;

  return {
    instruction: closeLutInstruction(
      accountMetas as Record<keyof AccountMetas, IAccountMeta>,
      programAddress,
      remainingAccounts
    ),
    signers,
    bytesCreatedOnChain,
  };
}
