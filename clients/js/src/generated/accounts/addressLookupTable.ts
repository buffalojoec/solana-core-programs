/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  ProgramDerivedAddress,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  Account,
  Context,
  EncodedAccount,
  FetchEncodedAccountOptions,
  FetchEncodedAccountsOptions,
  assertAccountExists,
  decodeAccount,
  getProgramAddress,
  getProgramDerivedAddress,
} from '../shared';

export type AddressLookupTable<TAddress extends string = string> = Account<
  AddressLookupTableAccountData,
  TAddress
>;

export type AddressLookupTableAccountData = {
  discriminator: number;
  deactivationSlot: bigint;
  lastExtendedSlot: bigint;
  lastExtendedStartIndex: number;
  authority: Option<Address>;
  padding: number;
  addresses: Array<Address>;
};

export type AddressLookupTableAccountDataArgs = {
  deactivationSlot: number | bigint;
  lastExtendedSlot: number | bigint;
  lastExtendedStartIndex: number;
  authority: OptionOrNullable<Address>;
  padding: number;
  addresses: Array<Address>;
};

export function getAddressLookupTableAccountDataEncoder(): Encoder<AddressLookupTableAccountDataArgs> {
  return mapEncoder(
    getStructEncoder<{
      discriminator: number;
      deactivationSlot: number | bigint;
      lastExtendedSlot: number | bigint;
      lastExtendedStartIndex: number;
      authority: OptionOrNullable<Address>;
      padding: number;
      addresses: Array<Address>;
    }>(
      [
        ['discriminator', getU32Encoder()],
        ['deactivationSlot', getU64Encoder()],
        ['lastExtendedSlot', getU64Encoder()],
        ['lastExtendedStartIndex', getU8Encoder()],
        ['authority', getOptionEncoder(getAddressEncoder(), { fixed: true })],
        ['padding', getU16Encoder()],
        [
          'addresses',
          getArrayEncoder(getAddressEncoder(), { size: 'remainder' }),
        ],
      ],
      { description: 'AddressLookupTableAccountData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Encoder<AddressLookupTableAccountDataArgs>;
}

export function getAddressLookupTableAccountDataDecoder(): Decoder<AddressLookupTableAccountData> {
  return getStructDecoder<AddressLookupTableAccountData>(
    [
      ['discriminator', getU32Decoder()],
      ['deactivationSlot', getU64Decoder()],
      ['lastExtendedSlot', getU64Decoder()],
      ['lastExtendedStartIndex', getU8Decoder()],
      ['authority', getOptionDecoder(getAddressDecoder(), { fixed: true })],
      ['padding', getU16Decoder()],
      [
        'addresses',
        getArrayDecoder(getAddressDecoder(), { size: 'remainder' }),
      ],
    ],
    { description: 'AddressLookupTableAccountData' }
  ) as Decoder<AddressLookupTableAccountData>;
}

export function getAddressLookupTableAccountDataCodec(): Codec<
  AddressLookupTableAccountDataArgs,
  AddressLookupTableAccountData
> {
  return combineCodec(
    getAddressLookupTableAccountDataEncoder(),
    getAddressLookupTableAccountDataDecoder()
  );
}

export function decodeAddressLookupTable<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): AddressLookupTable<TAddress> {
  return decodeAccount(
    encodedAccount,
    getAddressLookupTableAccountDataDecoder()
  );
}

export async function fetchAddressLookupTable<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<AddressLookupTable<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeAddressLookupTable(maybeAccount);
}

export async function safeFetchAddressLookupTable<
  TAddress extends string = string
>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchEncodedAccountOptions
): Promise<AddressLookupTable<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeAddressLookupTable(maybeAccount) : null;
}

export async function fetchAllAddressLookupTable(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<AddressLookupTable[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeAddressLookupTable(maybeAccount);
  });
}

export async function safeFetchAllAddressLookupTable(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchEncodedAccountsOptions
): Promise<AddressLookupTable[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      decodeAddressLookupTable(maybeAccount as EncodedAccount)
    );
}

export async function findAddressLookupTablePda(
  context: Pick<Context, 'getProgramAddress' | 'getProgramDerivedAddress'>,
  seeds: {
    /** The address of the LUT's authority */
    authority: Address;
    /** The recent slot associated with the LUT */
    recentSlot: number | bigint;
  }
): Promise<ProgramDerivedAddress> {
  const programAddress = await getProgramAddress(
    context,
    'splAddressLookupTable',
    'AddressLookupTab1e1111111111111111111111111'
  );
  return getProgramDerivedAddress(context, programAddress, [
    getAddressEncoder().encode(seeds.authority),
    getU64Encoder().encode(seeds.recentSlot),
  ]);
}

export async function fetchAddressLookupTableFromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findAddressLookupTablePda>[1],
  options?: FetchEncodedAccountOptions
): Promise<AddressLookupTable> {
  const [address] = await findAddressLookupTablePda(context, seeds);
  return fetchAddressLookupTable(context, address, options);
}

export async function safeFetchAddressLookupTableFromSeeds(
  context: Pick<
    Context,
    'fetchEncodedAccount' | 'getProgramAddress' | 'getProgramDerivedAddress'
  >,
  seeds: Parameters<typeof findAddressLookupTablePda>[1],
  options?: FetchEncodedAccountOptions
): Promise<AddressLookupTable | null> {
  const [address] = await findAddressLookupTablePda(context, seeds);
  return safeFetchAddressLookupTable(context, address, options);
}
