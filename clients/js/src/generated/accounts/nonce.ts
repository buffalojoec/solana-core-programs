/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  assertAccountExists,
  decodeAccount,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs-numbers';
import { Context } from '../shared';

export type Nonce<TAddress extends string = string> = Account<
  NonceAccountData,
  TAddress
>;

export type NonceAccountData = {
  discriminator: number;
  state: number;
  authority: Address;
  blockhash: Address;
  lamportsPerSignature: bigint;
};

export type NonceAccountDataArgs = {
  discriminator: number;
  state: number;
  authority: Address;
  blockhash: Address;
  lamportsPerSignature: number | bigint;
};

export function getNonceAccountDataEncoder() {
  return getStructEncoder<NonceAccountDataArgs>([
    ['discriminator', getU32Encoder()],
    ['state', getU32Encoder()],
    ['authority', getAddressEncoder()],
    ['blockhash', getAddressEncoder()],
    ['lamportsPerSignature', getU64Encoder()],
  ]) satisfies Encoder<NonceAccountDataArgs>;
}

export function getNonceAccountDataDecoder() {
  return getStructDecoder<NonceAccountData>([
    ['discriminator', getU32Decoder()],
    ['state', getU32Decoder()],
    ['authority', getAddressDecoder()],
    ['blockhash', getAddressDecoder()],
    ['lamportsPerSignature', getU64Decoder()],
  ]) satisfies Decoder<NonceAccountData>;
}

export function getNonceAccountDataCodec(): Codec<
  NonceAccountDataArgs,
  NonceAccountData
> {
  return combineCodec(
    getNonceAccountDataEncoder(),
    getNonceAccountDataDecoder()
  );
}

export function decodeNonce<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Nonce<TAddress> {
  return decodeAccount(encodedAccount, getNonceAccountDataDecoder());
}

export async function fetchNonce<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchAccountConfig
): Promise<Nonce<TAddress>> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  assertAccountExists(maybeAccount);
  return decodeNonce(maybeAccount);
}

export async function safeFetchNonce<TAddress extends string = string>(
  context: Pick<Context, 'fetchEncodedAccount'>,
  address: Address<TAddress>,
  options?: FetchAccountConfig
): Promise<Nonce<TAddress> | null> {
  const maybeAccount = await context.fetchEncodedAccount(address, options);
  return maybeAccount.exists ? decodeNonce(maybeAccount) : null;
}

export async function fetchAllNonce(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchAccountsConfig
): Promise<Nonce[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decodeNonce(maybeAccount);
  });
}

export async function safeFetchAllNonce(
  context: Pick<Context, 'fetchEncodedAccounts'>,
  addresses: Array<Address>,
  options?: FetchAccountsConfig
): Promise<Nonce[]> {
  const maybeAccounts = await context.fetchEncodedAccounts(addresses, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decodeNonce(maybeAccount as EncodedAccount));
}

export function getNonceSize(): number {
  return 80;
}
